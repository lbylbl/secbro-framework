<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"  
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd ">
	
	<context:component-scan base-package="org.secbroframework"/>
	
	<!-- freemaker视图解析器 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="cache" value="true" />
        <property name="prefix" value="" />
        <property name="suffix" value=".ftl" />
        <property name="contentType" value="text/html;charset=UTF-8"></property>
        <property name="requestContextAttribute" value="request" />
        <property name="exposeSpringMacroHelpers" value="true" />
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="viewClass" value="org.secbroframework.web.MyFreeMarkerView" />
    </bean>
	
	<!-- freemaker视图模板 -->
	<bean id="freemarkerConfig"
        class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/view/" />
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">0</prop>
                <prop key="default_encoding">UTF-8</prop>
                <prop key="number_format">0.##########</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="classic_compatible">true</prop>
                <prop key="template_exception_handler">ignore</prop>
				<prop key="auto_import">/common/macros.ftl as p</prop>
            </props>
        </property>
    </bean>
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
	    <!--  定义异常处理页面用来获取异常信息的变量名，默认名为exception  --> 
	    <property name="exceptionAttribute" value="ex"></property> 
	    <!--	定义默认的异常处理页面，当该异常类型的注册时使用  	--> 			
	    <property name="defaultErrorView" value="/wrong"/>
	    <!-- 
	    <property name="exceptionMappings">
	        <props>  
	            <prop key="com.reapal.reagw.core.engine.exception.AppBizException">/error/appBizException</prop>
	            <prop key="com.reapal.reagw.core.engine.exception.AppException">/error/appException</prop>
	        </props>  
	    </property>  
	       -->
	    <property name="defaultStatusCode" value="404"/>
	</bean>  
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
       <property name="dataSource" ref="dataSource" />
       <!-- <property name="mapperLocations" value="classpath:sqlMap/*Mapper.xml" /> -->
       <!-- 一般对应实体类所在的包，这个时候会自动取对应包中不包括包名的简单类名作为包括包名的别名。多个package之间可以用逗号或者分号等来进行分隔。 -->
       <!-- <property name="typeAliasesPackage" value="org.secbroframework.model" /> -->
	</bean> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <property name="basePackage" value="org.secbroframework.mapper" />
       <property name="markerInterface" value="org.secbroframework.mapper.SuperMapper"/>
       <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    
    
    <!-- 加载资源文件 -->
    <context:property-placeholder location="classpath:dbconfig.properties"/>
    
    <!-- 配置数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <!-- <property name="driverClassName" value="${driverClassName}" /> -->
        
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
  
		<!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}" />
        <!-- 连接池最大空闲 -->
        <property name="minIdle" value="${minIdle}" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="${maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}" />
  
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
        
  		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
        <!-- <property name="validationQuery" value="${validationQuery}" /> -->
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <!-- <property name="testWhileIdle" value="${testWhileIdle}" /> -->
        <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
        <!-- <property name="testOnBorrow" value="${testOnBorrow}" /> -->
        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <!-- <property name="testOnReturn" value="${testOnReturn}" /> -->
        <!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
			在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
 		-->
        <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
        
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${removeAbandoned}" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="${logAbandoned}" /> 
        
        <!-- 配置监控统计拦截的filters -->
        <!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
			监控统计用的filter:stat
			日志用的filter:log4j
 			防御sql注入的filter:wall 
 		-->
        <property name="filters" value="${filters}" />
    </bean>
</beans>
